#pragma once
//
// CMake generated file DO NOT EDIT Common.h !
//

//! \file Common definitions and macros. Taken from Leviathan

#include <string>
#include <tuple>
#include <chrono>

namespace DV{

constexpr auto DUALVIEW_VERSION = "@DUALVIEW_VERSION_STR@";
constexpr auto MAIN_THREAD_MAGIC = 42;

//! List of all image types that are supported and their mimetypes
constexpr auto SUPPORTED_EXTENSIONS = {
    std::make_tuple(".gif", "image/gif"),
    std::make_tuple(".png", "image/png"),
    std::make_tuple(".jpg", "image/jpeg"),
    std::make_tuple(".jpeg", "image/jpeg"),
    std::make_tuple(".bmp", "image/bmp"),
};


//! The amount of time before CacheManager automatically unloads images
constexpr auto DUALVIEW_SETTINGS_UNLOAD_TIME_MS = 30000;

//! Database id type
using DBID = int64_t;

// Default database thing IDs
constexpr auto DATABASE_ROOT_FOLDER_ID = 1;
constexpr auto DATABASE_UNCATEGORIZED_COLLECTION_ID = 1;
constexpr auto DATABASE_UNCATEGORIZED_PRIVATECOLLECTION_ID = 2;

//! Used to shorten filenames when moving around to make sure no paths are too long
constexpr auto DUALVIEW_MAX_ALLOWED_PATH = 240;


//! \brief Tag category definitions
//! 
//! see the maintables.sql for more accurate definitions of these
enum class TAG_CATEGORY {
    
    //-- 0 - describes an object or a character in the image
    DESCRIBE_CHARACTER_OBJECT = 0,

    //-- 1 - Tags a character or an person in the image
    CHARACTER = 1,

    //-- 2 - Tags something that's not immediately visible from the image 
    // or relates to something meta, like captions
    META = 2,

    //-- 3 - Tags the series or universe this image belongs to, 
    // for example star wars. Or another loosely defined series
    COPYRIGHT = 3,

    //-- 4 - Tags an action that is being performed
    ACTION = 4,
        
    //-- 5 - The level of quality
    QUALITY_HELPFULL_LEVEL = 5
};

//! Prebuilt list of TAG_CATEGORY and strings
constexpr auto TAG_CATEGORY_STR = {
    std::make_tuple(TAG_CATEGORY::DESCRIBE_CHARACTER_OBJECT,
        "DESCRIBE_CHARACTER_OBJECT"),
    std::make_tuple(TAG_CATEGORY::CHARACTER,
        "CHARACTER"),
    std::make_tuple(TAG_CATEGORY::META,
        "META"),
    std::make_tuple(TAG_CATEGORY::COPYRIGHT,
        "COPYRIGHT"),
    std::make_tuple(TAG_CATEGORY::ACTION,
        "ACTION"),
    std::make_tuple(TAG_CATEGORY::QUALITY_HELPFULL_LEVEL,
        "QUALITY_HELPFULL_LEVEL"),
};

}

//! Helper for creating non-locking version wrappers for methods
#define CREATE_NON_LOCKING_WRAPPER(x) template<typename... TBindTypes> auto x ## AG (\
TBindTypes&&... valuestobind) { GUARD_LOCK(); return x (guard, \
    std::forward<TBindTypes>(valuestobind)...); }




#include "leviathan/Define.h"
using Leviathan::Logger;

#include "Utility/Convert.h"
using Leviathan::Convert;

